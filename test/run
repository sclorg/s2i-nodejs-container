#!/bin/bash
#
# The 'run' performs a simple test that verifies that STI image.
# The main focus here is to exercise the STI scripts.
#
# IMAGE_NAME specifies a name of the candidate image used for testing.
# The image has to be available before this script is executed.

THISDIR=$(dirname ${BASH_SOURCE[0]})

TEST_LIST_APP="\
test_run_app_application
test_s2i_usage
test_scl_usage
test_connection
test_docker_run_usage
test_npm_functionality
test_check_build_using_dockerfile
test_nodemon_removed
test_npm_cache_cleared
test_npm_tmp_cleared
kill_test_application
test_dev_mode_true_development
test_dev_mode_false_production
"

TEST_LIST_BINARY="\
test_run_binary_application
"

TEST_LIST_NODE_ENV="\
test_run_app_application
test_connection
test_nodemon_present
test_npm_cache_exists
kill_test_application
test_dev_mode_true_development
test_dev_mode_false_development
"

TEST_LIST_DEV_MODE="\
test_run_app_application
test_connection
test_nodemon_present
test_npm_cache_exists
kill_test_application
test_dev_mode_true_development
test_dev_mode_false_production
"

TEST_LIST_HW="\
test_safe_logging
test_run_hw_application
test_incremental_build
test_build_express_webapp
"

source "${THISDIR}/test-lib.sh"
source "${THISDIR}/test-lib-nodejs.sh"

test -n $IMAGE_NAME \
  -a -n $VERSION

test_dir="$(readlink -f $(dirname ${BASH_SOURCE[0]}))"
image_dir="$(readlink -f ${test_dir}/..)"

# Since we built the candidate image locally, we don't want S2I attempt to pull
# it from Docker hub
s2i_args="--pull-policy=never "

# TODO: This should be part of the image metadata
test_port=8080

# Common git configuration
readonly -A gitconfig=(
  [user.name]="builder"
  [user.email]="build@localhost"
  [commit.gpgsign]="false"
)

[[ -n "$DEBUG" ]] && set -x

ct_init
cid_file=$CID_FILE_DIR/$(mktemp -u -p . --suffix=.cid)

# Build the application image twice to ensure the 'save-artifacts' and
# 'restore-artifacts' scripts are working properly
prepare app
check_prep_result $? app || exit
echo "Testing the production image build"
run_s2i_build
ct_check_testcase_result $?

TEST_SET=${TESTS:-$TEST_LIST_APP} ct_run_tests_from_testset "app"

echo "Testing the development image build: s2i build -e \"NODE_ENV=development\")"
run_s2i_build "-e NODE_ENV=development"
ct_check_testcase_result $?

TEST_SET=${TESTS:-$TEST_LIST_NODE_ENV} ct_run_tests_from_testset "node_env_development"

echo "Testing the development image build: s2i build -e \"DEV_MODE=true\")"
run_s2i_build "-e DEV_MODE=true"
ct_check_testcase_result $?

TEST_SET=${TESTS:-$TEST_LIST_DEV_MODE} ct_run_tests_from_testset "dev_mode"

echo "Testing proxy safe logging..."
prepare hw
check_prep_result $? hw || exit
run_s2i_build_proxy http://user.password@0.0.0.0:8000 https://user.password@0.0.0.0:8000 > /tmp/build-log 2>&1
ct_check_testcase_result $?

TEST_SET=${TESTS:-$TEST_LIST_HW} ct_run_tests_from_testset "hw"

if [[ "$VERSION" != "18" ]]; then
  # This test is not available for NodeJS-18
  # There is a traceback in NodeJS. It reached EOL support.
  #npm ERR! gyp ERR! System Linux 6.9.12-200.fc40.x86_64
  #npm ERR! gyp ERR! command "/usr/bin/node-18" "/usr/lib/node_modules_18/npm/node_modules/node-gyp/bin/node-gyp.js" "rebuild"
  #npm ERR! gyp ERR! cwd /opt/app-root/src/node_modules/node-rdkafka
  #npm ERR! gyp ERR! node -v v18.19.0
  #npm ERR! gyp ERR! node-gyp -v v10.0.1
  #npm ERR! gyp ERR! not ok
  TEST_SET=${TESTS:-$TEST_LIST_BINARY} ct_run_tests_from_testset "binary"
fi
