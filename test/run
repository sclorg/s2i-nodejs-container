#!/bin/bash
#
# The 'run' performs a simple test that verifies that STI image.
# The main focus here is to exercise the STI scripts.
#
# IMAGE_NAME specifies a name of the candidate image used for testing.
# The image has to be available before this script is executed.
#
# For each client package test, XXX_REVISION specifies which
# branch or tag should be tested; by default it uses the latest
# released version as reported by `npm show XXX version` where
# XXX is the name of the npm package.
#
# For each client package XXX_REPO must be defined in this
# test file to set the repository that corresponds to the
# npm package XXX.

THISDIR=$(dirname ${BASH_SOURCE[0]})

TEST_LIST_APP="\
test_run_app_application
test_s2i_usage
test_scl_usage
test_connection
test_docker_run_usage
test_scl_variables_in_dockerfile
test_npm_functionality
test_check_build_using_dockerfile
test_nodemon_removed
test_npm_cache_cleared
test_npm_tmp_cleared
kill_test_application
test_dev_mode_true_development
test_dev_mode_false_production
"

TEST_LIST_BINARY="\
test_run_binary_application
"

TEST_LIST_NODE_ENV="\
test_run_app_application
test_connection
test_nodemon_present
test_npm_cache_exists
kill_test_application
test_dev_mode_true_development
test_dev_mode_false_development
"

TEST_LIST_DEV_MODE="\
test_run_app_application
test_connection
test_nodemon_present
test_npm_cache_exists
kill_test_application
test_dev_mode_true_development
test_dev_mode_false_production
"

TEST_LIST_HW="\
test_safe_logging
test_run_hw_application
test_incremental_build
test_build_express_webapp
"

# define the client npm packages to be tested. For
# each entry XXX in the list a corresponding value for
# XXX_REVISION and XXX_REPO must be defined below
TEST_LIST_CLIENTS="\
test_client_express
test_client_prom
test_client_opossum
test_client_kube
test_client_faas
test_client_cloudevents
test_client_fastify
"

# If an app or a test is in UNSTABLE_TESTS and IGNORE_UNSTABLE_TESTS
# env variable is defined, a result of the test has no impact on
# the overall result of the test suite.
#
# Reasons for specific tests to be marked as unstable:
#   test_client_pino:
#     - the upstream testcase nondeterministically fails.
#       Bug on upstream is already issued. We were not able to find a reproducer
#       for this yet. See https://github.com/pinojs/pino/issues/1252.
## declare -a UNSTABLE_TESTS=(test_client_pino)

readonly EXPRESS_REVISION="${EXPRESS_REVISION:-$(docker run --rm "${IMAGE_NAME}" -- npm show express version)}"
readonly EXPRESS_REPO="https://github.com/expressjs/express.git"
readonly PINO_REVISION=v"${PINO_REVISION:-$(docker run --rm "${IMAGE_NAME}" -- npm show pino version)}"
readonly PINO_REPO="https://github.com/pinojs/pino.git"
readonly PROMCLIENT_REVISION=v"${PROMCLIENT_REVISION:-$(docker run --rm "${IMAGE_NAME}" -- npm show prom-client version)}"
readonly PROMCLIENT_REPO="https://github.com/siimon/prom-client.git"
readonly OPOSSUM_REVISION="v${OPOSSUM_REVISION:-$(docker run --rm "${IMAGE_NAME}" -- npm show opossum version)}"
readonly OPOSSUM_REPO="https://github.com/nodeshift/opossum.git"
readonly KUBESERVICEBINDINGS_REVISION="v${KUBESERVICEBINDINGS_REVISION:-$(docker run --rm "${IMAGE_NAME}" -- npm show kube-service-bindings version)}"
readonly KUBESERVICEBINDINGS_REPO="https://github.com/nodeshift/kube-service-bindings.git"
readonly FAASJSRUNTIME_REVISION="v${FAASJSRUNTIME_REVISION:-$(docker run --rm "${IMAGE_NAME}" -- npm show faas-js-runtime version)}"
readonly FAASJSRUNTIME_REPO="https://github.com/nodeshift/faas-js-runtime.git"
readonly CLOUDEVENTS_REVISION="v${CLOUDEVENTS_REVISION:-$(docker run --rm "${IMAGE_NAME}" -- npm show cloudevents version)}"
readonly CLOUDEVENTS_REPO="https://github.com/cloudevents/sdk-javascript.git"
readonly FASTIFY_REVISION="v${FASTIFY_REVISION:-$(docker run --rm "${IMAGE_NAME}" -- npm show fastify version)}"
readonly FASTIFY_REPO="https://github.com/fastify/fastify.git"

source "${THISDIR}/test-lib.sh"
source "${THISDIR}/test-lib-nodejs.sh"

test -n $IMAGE_NAME \
  -a -n $VERSION

test_dir="$(readlink -f $(dirname ${BASH_SOURCE[0]}))"
image_dir="$(readlink -f ${test_dir}/..)"

# Since we built the candidate image locally, we don't want S2I attempt to pull
# it from Docker hub
s2i_args="--pull-policy=never "

# TODO: This should be part of the image metadata
test_port=8080

# Common git configuration
readonly -A gitconfig=(
  [user.name]="builder"
  [user.email]="build@localhost"
  [commit.gpgsign]="false"
)

if [ "$DEBUG" != "" ]; then
  set -x
fi

ct_init
cid_file=$CID_FILE_DIR/$(mktemp -u -p . --suffix=.cid)

# Build the application image twice to ensure the 'save-artifacts' and
# 'restore-artifacts' scripts are working properly
prepare app
check_prep_result $? app || exit
echo "Testing the production image build"
run_s2i_build
ct_check_testcase_result $?

TEST_SET=${TESTS:-$TEST_LIST_APP} ct_run_tests_from_testset "app"

echo "Testing the development image build: s2i build -e \"NODE_ENV=development\")"
run_s2i_build "-e NODE_ENV=development"
ct_check_testcase_result $?

TEST_SET=${TESTS:-$TEST_LIST_NODE_ENV} ct_run_tests_from_testset "node_env_development"

echo "Testing the development image build: s2i build -e \"DEV_MODE=true\")"
run_s2i_build "-e DEV_MODE=true"
ct_check_testcase_result $?

TEST_SET=${TESTS:-$TEST_LIST_DEV_MODE} ct_run_tests_from_testset "dev_mode"

echo "Testing proxy safe logging..."
prepare hw
check_prep_result $? hw || exit
run_s2i_build_proxy http://user.password@0.0.0.0:8000 https://user.password@0.0.0.0:8000 > /tmp/build-log 2>&1
ct_check_testcase_result $?

TEST_SET=${TESTS:-$TEST_LIST_HW} ct_run_tests_from_testset "hw"

TEST_SET=${TESTS:-$TEST_LIST_CLIENTS} ct_run_tests_from_testset "clients"

TEST_SET=${TESTS:-$TEST_LIST_BINARY} ct_run_tests_from_testset "binary"
